/**
 *  This file is part of Google App Engine suppport in NetBeans IDE.
 *
 *  Google App Engine suppport in NetBeans IDE is free software: you can
 *  redistribute it and/or modify it under the terms of the GNU General
 *  Public License as published by the Free Software Foundation, either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  Google App Engine suppport in NetBeans IDE is distributed in the hope
 *  that it will be useful, but WITHOUT ANY WARRANTY; without even the
 *  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Google App Engine suppport in NetBeans IDE.
 *  If not, see <http://www.gnu.org/licenses/>.
 */
package org.netbeans.modules.j2ee.appengine.wizards;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import javax.swing.JSpinner;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.NbBundle;

/**
 * @author Michal Mocnak
 */
public class AddServerPropertiesVisualPanel extends javax.swing.JPanel {

    private final List<ChangeListener> listeners = new ArrayList<ChangeListener>();

    /** Creates new form AddServerPropertiesVisualPanel */
    public AddServerPropertiesVisualPanel() {
        initComponents();

        // Set name
        setName(NbBundle.getMessage(AddServerPropertiesVisualPanel.class, "TITLE_Properties"));

        // Set spinner formating
        http.setEditor(new JSpinner.NumberEditor(http, "#"));
        debug.setEditor(new JSpinner.NumberEditor(debug, "#"));

        // Set listeners
        http.addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
                fireChangeEvent();
            }
        });

        debug.addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
                fireChangeEvent();
            }
        });

        host.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                fireChangeEvent();
            }

            public void removeUpdate(DocumentEvent e) {
                fireChangeEvent();
            }

            public void changedUpdate(DocumentEvent e) {
                fireChangeEvent();
            }
        });
    }

    public int getHttpPort() {
        return (Integer) http.getValue();
    }

    public int getDebugPort() {
        return (Integer) debug.getValue();
    }

    public String getHost() {
        return host.getText();
    }
    
    public String getDataNucleusEnhancerVersion() {
        if ( dataNucleusCheckBox.isSelected() ) {
            return "v2";
        } else {
            return "v1";
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        host = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        http = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        debug = new javax.swing.JSpinner();
        dataNucleusCheckBox = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AddServerPropertiesVisualPanel.class, "AddServerPropertiesVisualPanel.jLabel1.text")); // NOI18N
        jLabel1.setToolTipText(org.openide.util.NbBundle.getMessage(AddServerPropertiesVisualPanel.class, "AddServerPropertiesVisualPanel.jLabel1.text")); // NOI18N

        host.setText(org.openide.util.NbBundle.getMessage(AddServerPropertiesVisualPanel.class, "AddServerPropertiesVisualPanel.host.text")); // NOI18N
        host.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(AddServerPropertiesVisualPanel.class, "AddServerPropertiesVisualPanel.jLabel2.text")); // NOI18N
        jLabel2.setToolTipText(org.openide.util.NbBundle.getMessage(AddServerPropertiesVisualPanel.class, "AddServerPropertiesVisualPanel.jLabel2.text")); // NOI18N

        http.setToolTipText(org.openide.util.NbBundle.getMessage(AddServerPropertiesVisualPanel.class, "AddServerPropertiesVisualPanel.jLabel2.text")); // NOI18N
        http.setValue(8080);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(AddServerPropertiesVisualPanel.class, "AddServerPropertiesVisualPanel.jLabel3.text")); // NOI18N

        debug.setToolTipText(org.openide.util.NbBundle.getMessage(AddServerPropertiesVisualPanel.class, "AddServerPropertiesVisualPanel.jLabel3.text")); // NOI18N
        debug.setValue(8765);

        dataNucleusCheckBox.setSelected(true);
        dataNucleusCheckBox.setText("Use DataNucleus Access Platform 3.0 and JPA 2.0"); // NOI18N
        dataNucleusCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(dataNucleusCheckBox)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .add(18, 18, 18)
                        .add(host))
                    .add(layout.createSequentialGroup()
                        .add(jLabel2)
                        .add(18, 18, 18)
                        .add(http)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel3)
                        .add(18, 18, 18)
                        .add(debug)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(host, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(http, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3)
                    .add(debug, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(dataNucleusCheckBox)
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox dataNucleusCheckBox;
    private javax.swing.JSpinner debug;
    private javax.swing.JTextField host;
    private javax.swing.JSpinner http;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

    public void addChangeListener(ChangeListener l) {
        synchronized (listeners) {
            listeners.add(l);
        }
    }

    public void removeChangeListener(ChangeListener l) {
        synchronized (listeners) {
            listeners.remove(l);
        }
    }

    private void fireChangeEvent() {
        Iterator it;

        synchronized (listeners) {
            it = new HashSet<ChangeListener>(listeners).iterator();
        }

        ChangeEvent ev = new ChangeEvent(this);
        
        while (it.hasNext()) {
            ((ChangeListener) it.next()).stateChanged(ev);
        }
    }
}